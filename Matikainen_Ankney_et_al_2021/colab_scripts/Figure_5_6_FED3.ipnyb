{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Figure_5_6_FED3.ipnyb","provenance":[{"file_id":"1IyMtBoLY7NDhRSJoYiHJ5WnjUrMWvjnu","timestamp":1615846196715},{"file_id":"1yS6LZ5-2j5nEmMtClJIU8JE4xtTfCkmk","timestamp":1605881412974},{"file_id":"16lVi-g4AEkTgl44aCR7XehcFpexS7daX","timestamp":1605817424920},{"file_id":"14-QTZkMVJ9NT9Z_5r6-7zVGgCGvWZ0xY","timestamp":1587999611931}],"collapsed_sections":["ZBK4gvXgFy0z"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"lEuyVYDpx7mh"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZDkRKJIJyGVK"},"source":["## Import Libraries"]},{"cell_type":"code","metadata":{"id":"Z_exo57KyHQ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615846950203,"user_tz":300,"elapsed":7387,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"bea10f50-9ed4-4238-8292-0de7ec083f18"},"source":["!pip install seaborn==0.9.0\n","import pandas as pd\n","from pandas.plotting import parallel_coordinates\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.collections as clt\n","import matplotlib.pyplot as plt\n","from google.colab import files \n","import os\n","import math\n","import datetime\n","from datetime import datetime\n","import warnings\n","warnings.simplefilter(action='ignore', category=FutureWarning)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting seaborn==0.9.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a8/76/220ba4420459d9c4c9c9587c6ce607bf56c25b3d3d2de62056efe482dadc/seaborn-0.9.0-py3-none-any.whl (208kB)\n","\r\u001b[K     |█▋                              | 10kB 11.3MB/s eta 0:00:01\r\u001b[K     |███▏                            | 20kB 10.7MB/s eta 0:00:01\r\u001b[K     |████▊                           | 30kB 7.3MB/s eta 0:00:01\r\u001b[K     |██████▎                         | 40kB 7.6MB/s eta 0:00:01\r\u001b[K     |███████▉                        | 51kB 4.5MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 61kB 4.2MB/s eta 0:00:01\r\u001b[K     |███████████                     | 71kB 4.8MB/s eta 0:00:01\r\u001b[K     |████████████▋                   | 81kB 4.9MB/s eta 0:00:01\r\u001b[K     |██████████████▏                 | 92kB 5.2MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 102kB 4.3MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 112kB 4.3MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 122kB 4.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 133kB 4.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 143kB 4.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 153kB 4.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 163kB 4.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 174kB 4.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 184kB 4.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 194kB 4.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 204kB 4.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 215kB 4.3MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=0.14.0 in /usr/local/lib/python3.7/dist-packages (from seaborn==0.9.0) (1.4.1)\n","Requirement already satisfied: numpy>=1.9.3 in /usr/local/lib/python3.7/dist-packages (from seaborn==0.9.0) (1.19.5)\n","Requirement already satisfied: matplotlib>=1.4.3 in /usr/local/lib/python3.7/dist-packages (from seaborn==0.9.0) (3.2.2)\n","Requirement already satisfied: pandas>=0.15.2 in /usr/local/lib/python3.7/dist-packages (from seaborn==0.9.0) (1.1.5)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (0.10.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (2.4.7)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (1.3.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.15.2->seaborn==0.9.0) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib>=1.4.3->seaborn==0.9.0) (1.15.0)\n","Installing collected packages: seaborn\n","  Found existing installation: seaborn 0.11.1\n","    Uninstalling seaborn-0.11.1:\n","      Successfully uninstalled seaborn-0.11.1\n","Successfully installed seaborn-0.9.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"IvXEDFMU3VQo"},"source":["##Mount Google Drive"]},{"cell_type":"code","metadata":{"id":"tQV3fxHw3XvU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615846970331,"user_tz":300,"elapsed":17539,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"0e1b7e6b-09bf-4348-a260-531c50b912dd"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q90kPM277FNM"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bH4G2oBs7Fws"},"source":["##import 1_hr_daily data"]},{"cell_type":"code","metadata":{"id":"GRYTzjJo7I6E","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847078905,"user_tz":300,"elapsed":8435,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"41d7f07b-0fc8-48aa-eced-838b36f362d9"},"source":["##############################################\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C149_F2/\"\n","\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs1 = pd.DataFrame()\n","files = os.listdir (PATH)\n","#format = '%H:%M:%S'\n","#print (\"Found \" + str(len(files)) + \" files.  Estimated time for import is \" + str(round(len(files)/60*3,1)) + \" minutes.  Sit tight...\")\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","  #print (\"Concatenating...\", file)\n","  #temp = pd.read_csv(PATH + file, parse_dates = True, index_col = ['MM:DD:YYYY hh:mm:ss'])\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","  temp['mouse'] = PATH[-8:-1]\n","\n","\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","    \n","  #join each file together in one df \n","  dfs1 = pd.concat ([dfs1, temp]).reset_index(drop=True) \n","\n","  dfs1=dfs1.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","  \n","  \n","startingday = dfs1['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs1[\"day_float\"] = dfs1['MM:DD:YYYY hh:mm:ss'] - dfs1['MM:DD:YYYY hh:mm:ss'][0]\n","dfs1[\"day_float\"] = dfs1[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs1['4hour'] = dfs1['day_float'].astype(int)\n","dfs1.tail()"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Number of files found: \n","35\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1504</th>\n","      <td>2020-07-27 11:32:47</td>\n","      <td>3</td>\n","      <td>4.06</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>20</td>\n","      <td>7</td>\n","      <td>19</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_072720_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:53:16</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>1505</th>\n","      <td>2020-07-27 11:32:51</td>\n","      <td>3</td>\n","      <td>4.05</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>20</td>\n","      <td>7</td>\n","      <td>20</td>\n","      <td>1.0</td>\n","      <td>SHI_C149_F2_FED003_072720_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:53:20</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>1506</th>\n","      <td>2020-07-27 11:34:15</td>\n","      <td>3</td>\n","      <td>4.05</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>20</td>\n","      <td>8</td>\n","      <td>20</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_072720_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:54:44</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>1507</th>\n","      <td>2020-07-27 11:35:02</td>\n","      <td>3</td>\n","      <td>4.06</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>21</td>\n","      <td>8</td>\n","      <td>20</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_072720_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:55:31</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>1508</th>\n","      <td>2020-07-27 11:35:13</td>\n","      <td>3</td>\n","      <td>4.05</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>21</td>\n","      <td>8</td>\n","      <td>21</td>\n","      <td>2.0</td>\n","      <td>SHI_C149_F2_FED003_072720_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:55:42</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","1504 2020-07-27 11:32:47              3  ...       46.0     46\n","1505 2020-07-27 11:32:51              3  ...       46.0     46\n","1506 2020-07-27 11:34:15              3  ...       46.0     46\n","1507 2020-07-27 11:35:02              3  ...       46.0     46\n","1508 2020-07-27 11:35:13              3  ...       46.0     46\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"EUy1GQ9p-52N","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847103997,"user_tz":300,"elapsed":6670,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"fd6807ca-7116-4399-8441-3b4db4f007de"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C149_F1/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs2 = pd.DataFrame()\n","files = os.listdir (PATH)\n","#format = '%H:%M:%S'\n","#print (\"Found \" + str(len(files)) + \" files.  Estimated time for import is \" + str(round(len(files)/60*3,1)) + \" minutes.  Sit tight...\")\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","  #print (\"Concatenating...\", file)\n","  #temp = pd.read_csv(PATH + file, parse_dates = True, index_col = ['MM:DD:YYYY hh:mm:ss'])\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","    \n","  #join each file together in one df \n","  dfs2 = pd.concat ([dfs2, temp]).reset_index(drop=True) \n","\n","  # sort tbe dataframe df by Device and print the head\n","  dfs2=dfs2.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","  \n","startingday = dfs2['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs2[\"day_float\"] = dfs2['MM:DD:YYYY hh:mm:ss'] - startingday\n","dfs2[\"day_float\"] = dfs2[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs2['4hour'] = dfs2['day_float'].astype(int)\n","dfs2.head()"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Number of files found: \n","33\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 12:05:29</td>\n","      <td>2</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F1_FED002_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 12:26:15</td>\n","      <td>2</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F1_FED002_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F1</td>\n","      <td>0 days 00:20:46</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 12:47:10</td>\n","      <td>2</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F1_FED002_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F1</td>\n","      <td>0 days 00:41:41</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 12:55:37</td>\n","      <td>2</td>\n","      <td>4.11</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>504.0</td>\n","      <td>SHI_C149_F1_FED002_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F1</td>\n","      <td>0 days 00:50:08</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-12 10:37:31</td>\n","      <td>2</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F1_FED002_061220_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 12:05:29              2  ...        1.0      1\n","1 2020-06-11 12:26:15              2  ...        1.0      1\n","2 2020-06-11 12:47:10              2  ...        1.0      1\n","3 2020-06-11 12:55:37              2  ...        1.0      1\n","4 2020-06-12 10:37:31              2  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"-MWekB4T-_JY","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847141205,"user_tz":300,"elapsed":5758,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"a3f19519-ade7-4eb1-b6f3-b21d83de45ab"},"source":["##############################################\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C149_F0/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs3 = pd.DataFrame()\n","files = os.listdir (PATH)\n","#format = '%H:%M:%S'\n","#print (\"Found \" + str(len(files)) + \" files.  Estimated time for import is \" + str(round(len(files)/60*3,1)) + \" minutes.  Sit tight...\")\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","  #print (\"Concatenating...\", file)\n","  #temp = pd.read_csv(PATH + file, parse_dates = True, index_col = ['MM:DD:YYYY hh:mm:ss'])\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","\n","    \n","  #join each file together in one df \n","  dfs3 = pd.concat ([dfs3, temp]).reset_index(drop=True) \n","\n","  dfs3=dfs3.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","  \n","# sort tbe dataframe df by Device and print the head\n","startingday = dfs3['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs3[\"day_float\"] = dfs3['MM:DD:YYYY hh:mm:ss'] - dfs3['MM:DD:YYYY hh:mm:ss'][0]\n","dfs3[\"day_float\"] = dfs3[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs3['4hour'] = dfs3['day_float'].astype(int)\n","dfs3.head()"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Number of files found: \n","28\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-19 09:48:14</td>\n","      <td>1</td>\n","      <td>4.12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F0_FED001_061920_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F0</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-19 09:48:28</td>\n","      <td>1</td>\n","      <td>4.12</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>11.0</td>\n","      <td>SHI_C149_F0_FED001_061920_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F0</td>\n","      <td>0 days 00:00:14</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-19 09:50:27</td>\n","      <td>1</td>\n","      <td>4.12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F0_FED001_061920_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F0</td>\n","      <td>0 days 00:02:13</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-19 09:50:44</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>13.0</td>\n","      <td>SHI_C149_F0_FED001_061920_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F0</td>\n","      <td>0 days 00:02:30</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-19 09:51:26</td>\n","      <td>1</td>\n","      <td>4.12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F0_FED001_061920_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F0</td>\n","      <td>0 days 00:03:12</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-19 09:48:14              1  ...        1.0      1\n","1 2020-06-19 09:48:28              1  ...        1.0      1\n","2 2020-06-19 09:50:27              1  ...        1.0      1\n","3 2020-06-19 09:50:44              1  ...        1.0      1\n","4 2020-06-19 09:51:26              1  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"rMa7Qt6d_VAs","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847153856,"user_tz":300,"elapsed":7276,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"fe827317-8f5e-4110-ae45-7269ebb17c60"},"source":["##############################################\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C150_M1/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs4 = pd.DataFrame()\n","files = os.listdir (PATH)\n","#format = '%H:%M:%S'\n","#print (\"Found \" + str(len(files)) + \" files.  Estimated time for import is \" + str(round(len(files)/60*3,1)) + \" minutes.  Sit tight...\")\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","  #print (\"Concatenating...\", file)\n","  #temp = pd.read_csv(PATH + file, parse_dates = True, index_col = ['MM:DD:YYYY hh:mm:ss'])\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file) \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","\n","    \n","  #join each file together in one df \n","  dfs4 = pd.concat ([dfs4, temp]).reset_index(drop=True) \n","\n","  dfs4=dfs4.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","  \n","startingday = dfs4['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs4[\"day_float\"] = dfs4['MM:DD:YYYY hh:mm:ss'] - dfs4['MM:DD:YYYY hh:mm:ss'][0]\n","dfs4[\"day_float\"] = dfs4[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs4['4hour'] = dfs4['day_float'].astype(int)\n","dfs4.head()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Number of files found: \n","35\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 14:01:16</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M1_FED003_061120_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 14:02:25</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M1_FED003_061120_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M1</td>\n","      <td>0 days 00:01:09</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 14:02:40</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.0</td>\n","      <td>SHI_C150_M1_FED003_061120_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M1</td>\n","      <td>0 days 00:01:24</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 14:05:25</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M1_FED003_061120_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M1</td>\n","      <td>0 days 00:04:09</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-11 14:05:28</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M1_FED003_061120_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M1</td>\n","      <td>0 days 00:04:12</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 14:01:16              3  ...        1.0      1\n","1 2020-06-11 14:02:25              3  ...        1.0      1\n","2 2020-06-11 14:02:40              3  ...        1.0      1\n","3 2020-06-11 14:05:25              3  ...        1.0      1\n","4 2020-06-11 14:05:28              3  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"jyy6WT39AH3z","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847171772,"user_tz":300,"elapsed":6318,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"4bd504bf-8475-409e-faf9-c462333eeed5"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C150_M2/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs5 = pd.DataFrame()\n","files = os.listdir (PATH)\n","#format = '%H:%M:%S'\n","#print (\"Found \" + str(len(files)) + \" files.  Estimated time for import is \" + str(round(len(files)/60*3,1)) + \" minutes.  Sit tight...\")\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","  #print (\"Concatenating...\", file)\n","  #temp = pd.read_csv(PATH + file, parse_dates = True, index_col = ['MM:DD:YYYY hh:mm:ss'])\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  \n","\n","    \n","  #join each file together in one df \n","  dfs5 = pd.concat ([dfs5, temp]).reset_index(drop=True) \n","\n","  dfs5=dfs5.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","  \n","# sort tbe dataframe df by Device and print the head\n","startingday = dfs5['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs5[\"day_float\"] = dfs5['MM:DD:YYYY hh:mm:ss'] - dfs5['MM:DD:YYYY hh:mm:ss'][0]\n","dfs5[\"day_float\"] = dfs5[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs5['4hour'] = dfs5['day_float'].astype(int)\n","dfs5.head()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Number of files found: \n","33\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 14:28:18</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M2_FED005_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M2</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 14:28:31</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>9.0</td>\n","      <td>SHI_C150_M2_FED005_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M2</td>\n","      <td>0 days 00:00:13</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 14:33:23</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M2_FED005_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M2</td>\n","      <td>0 days 00:05:05</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 14:37:28</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M2_FED005_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M2</td>\n","      <td>0 days 00:09:10</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-11 14:37:59</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>28.0</td>\n","      <td>SHI_C150_M2_FED005_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M2</td>\n","      <td>0 days 00:09:41</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 14:28:18              5  ...        1.0      1\n","1 2020-06-11 14:28:31              5  ...        1.0      1\n","2 2020-06-11 14:33:23              5  ...        1.0      1\n","3 2020-06-11 14:37:28              5  ...        1.0      1\n","4 2020-06-11 14:37:59              5  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"4BAj08DBAaaE","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847188525,"user_tz":300,"elapsed":5938,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"9c8e9861-33be-4681-a68d-f47ae11c14fa"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C150_M0/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs6 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","\n","\n","    \n","  #join each file together in one df \n","  dfs6 = pd.concat ([dfs6, temp]).reset_index(drop=True) \n","\n","  dfs6=dfs6.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","  \n","# sort tbe dataframe df by Device and print the head\n","startingday = dfs6['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs6[\"day_float\"] = dfs6['MM:DD:YYYY hh:mm:ss'] - dfs6['MM:DD:YYYY hh:mm:ss'][0]\n","dfs6[\"day_float\"] = dfs6[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs6['4hour'] = dfs6['day_float'].astype(int)\n","dfs6.head()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Number of files found: \n","29\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-19 12:00:38</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M0_FED001_061920_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M0</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-19 12:03:02</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M0_FED001_061920_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M0</td>\n","      <td>0 days 00:02:24</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-19 12:03:16</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>10.0</td>\n","      <td>SHI_C150_M0_FED001_061920_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M0</td>\n","      <td>0 days 00:02:38</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-19 12:05:01</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C150_M0_FED001_061920_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M0</td>\n","      <td>0 days 00:04:23</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-19 12:05:14</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>7.0</td>\n","      <td>SHI_C150_M0_FED001_061920_02.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C150_M0</td>\n","      <td>0 days 00:04:36</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-19 12:00:38              1  ...        1.0      1\n","1 2020-06-19 12:03:02              1  ...        1.0      1\n","2 2020-06-19 12:03:16              1  ...        1.0      1\n","3 2020-06-19 12:05:01              1  ...        1.0      1\n","4 2020-06-19 12:05:14              1  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"OyjS9PWpA49q","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847210587,"user_tz":300,"elapsed":7267,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"0d99fe85-c4e1-47b1-cb3b-f662ab8037da"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C148_M1/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs7 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","\n","    \n","  #join each file together in one df \n","  dfs7 = pd.concat ([dfs7, temp]).reset_index(drop=True) \n","\n","  dfs7=dfs7.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","\n","startingday = dfs7['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs7[\"day_float\"] = dfs7['MM:DD:YYYY hh:mm:ss'] - dfs7['MM:DD:YYYY hh:mm:ss'][0]\n","dfs7[\"day_float\"] = dfs7[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs7['4hour'] = dfs7['day_float'].astype(int)\n","dfs7.head()"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Number of files found: \n","35\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 13:01:21</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M1_FED003_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 13:11:45</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M1_FED003_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M1</td>\n","      <td>0 days 00:10:24</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 13:27:20</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M1_FED003_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M1</td>\n","      <td>0 days 00:25:59</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 13:54:41</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1190.0</td>\n","      <td>SHI_C148_M1_FED003_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M1</td>\n","      <td>0 days 00:53:20</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-12 11:44:42</td>\n","      <td>3</td>\n","      <td>3.85</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M1_FED003_061220_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 13:01:21              3  ...        1.0      1\n","1 2020-06-11 13:11:45              3  ...        1.0      1\n","2 2020-06-11 13:27:20              3  ...        1.0      1\n","3 2020-06-11 13:54:41              3  ...        1.0      1\n","4 2020-06-12 11:44:42              3  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"cEONayu7BCdv","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847241420,"user_tz":300,"elapsed":5883,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"c382f60d-cbb8-4c7b-ee30-b617c9e91881"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C148_M0/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs8 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file) \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","\n","    \n","  #join each file together in one df \n","  dfs8 = pd.concat ([dfs8, temp]).reset_index(drop=True) \n","\n","  dfs8=dfs8.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","  \n","startingday = dfs8['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs8[\"day_float\"] = dfs8['MM:DD:YYYY hh:mm:ss'] - dfs8['MM:DD:YYYY hh:mm:ss'][0]\n","dfs8[\"day_float\"] = dfs8[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs8['4hour'] = dfs8['day_float'].astype(int)\n","dfs8.head()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Number of files found: \n","29\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-19 10:58:35</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M0_FED001_061920_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M0</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-19 10:58:46</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>8.0</td>\n","      <td>SHI_C148_M0_FED001_061920_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M0</td>\n","      <td>0 days 00:00:11</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-19 11:06:51</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M0_FED001_061920_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M0</td>\n","      <td>0 days 00:08:16</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-19 11:07:05</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>10.0</td>\n","      <td>SHI_C148_M0_FED001_061920_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M0</td>\n","      <td>0 days 00:08:30</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-19 11:17:59</td>\n","      <td>1</td>\n","      <td>4.11</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>SHI_C148_M0_FED001_061920_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C148_M0</td>\n","      <td>0 days 00:19:24</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-19 10:58:35              1  ...        1.0      1\n","1 2020-06-19 10:58:46              1  ...        1.0      1\n","2 2020-06-19 11:06:51              1  ...        1.0      1\n","3 2020-06-19 11:07:05              1  ...        1.0      1\n","4 2020-06-19 11:17:59              1  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"uqob0vYjBH27","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847275629,"user_tz":300,"elapsed":7612,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"8af5b9bf-7c9c-457c-c1e6-d4400301a5b4"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C145_F1/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs9 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file)  \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","\n","   \n","  #join each file together in one df \n","  dfs9 = pd.concat ([dfs9, temp]).reset_index(drop=True) \n","\n","  dfs9=dfs9.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","  \n","startingday = dfs9['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs9[\"day_float\"] = dfs9['MM:DD:YYYY hh:mm:ss'] - dfs9['MM:DD:YYYY hh:mm:ss'][0]\n","dfs9[\"day_float\"] = dfs9[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs9['4hour'] = dfs9['day_float'].astype(int)\n","dfs9.head()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Number of files found: \n","36\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 11:43:52</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C145_F1_FED005_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C145_F1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 11:43:59</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C145_F1_FED005_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C145_F1</td>\n","      <td>0 days 00:00:07</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 12:01:36</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>514.0</td>\n","      <td>SHI_C145_F1_FED005_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C145_F1</td>\n","      <td>0 days 00:17:44</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 12:05:22</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C145_F1_FED005_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C145_F1</td>\n","      <td>0 days 00:21:30</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-11 12:45:09</td>\n","      <td>5</td>\n","      <td>4.09</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C145_F1_FED005_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C145_F1</td>\n","      <td>0 days 01:01:17</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 11:43:52              5  ...        1.0      1\n","1 2020-06-11 11:43:59              5  ...        1.0      1\n","2 2020-06-11 12:01:36              5  ...        1.0      1\n","3 2020-06-11 12:05:22              5  ...        1.0      1\n","4 2020-06-11 12:45:09              5  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"vWBfZ_KDBNYd","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847283641,"user_tz":300,"elapsed":4819,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"42f6aa70-9756-4646-b9a1-187151e22dbd"},"source":["##############################################\n","\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C144_M1/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs10 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file) \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","  \n","\n","    \n","  #join each file together in one df \n","  dfs10 = pd.concat ([dfs10, temp]).reset_index(drop=True) \n","\n","  dfs10=dfs10.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","\n","startingday = dfs10['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs10[\"day_float\"] = dfs10['MM:DD:YYYY hh:mm:ss'] - dfs10['MM:DD:YYYY hh:mm:ss'][0]\n","dfs10[\"day_float\"] = dfs10[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs10['4hour'] = dfs10['day_float'].astype(int)\n","dfs10.head()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Number of files found: \n","25\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 12:59:10</td>\n","      <td>6</td>\n","      <td>3.81</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M1_FED006_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M1</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 13:10:30</td>\n","      <td>6</td>\n","      <td>3.82</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M1_FED006_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M1</td>\n","      <td>0 days 00:11:20</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 13:14:26</td>\n","      <td>6</td>\n","      <td>3.81</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M1_FED006_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M1</td>\n","      <td>0 days 00:15:16</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 13:16:00</td>\n","      <td>6</td>\n","      <td>3.81</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M1_FED006_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M1</td>\n","      <td>0 days 00:16:50</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-11 13:51:39</td>\n","      <td>6</td>\n","      <td>3.81</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>SHI_C144_M1_FED006_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M1</td>\n","      <td>0 days 00:52:29</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 12:59:10              6  ...        1.0      1\n","1 2020-06-11 13:10:30              6  ...        1.0      1\n","2 2020-06-11 13:14:26              6  ...        1.0      1\n","3 2020-06-11 13:16:00              6  ...        1.0      1\n","4 2020-06-11 13:51:39              6  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"fZj_cgIxCCy1","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1615847309047,"user_tz":300,"elapsed":9225,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"992cc331-a3a0-48d7-b36e-b1e92ee428ad"},"source":["##############################################\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SHI/C144_M0/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","dfs11 = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-12:-9]+\"_\"+PATH[-8:-1]+\"_\"+file) \n","  temp['group'] = PATH[-12:-9]\n","  temp['sex'] = PATH[-3:-2]\n","\n","  temp['mouse'] = PATH[-8:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","\n","  \n","\n","    \n","  #join each file together in one df \n","  dfs11 = pd.concat ([dfs11, temp]).reset_index(drop=True) \n","\n","  dfs11=dfs11.sort_values(by=['MM:DD:YYYY hh:mm:ss']).reset_index(drop=True) \n","\n","\n","dfs11.head()\n","\n","startingday = dfs11['MM:DD:YYYY hh:mm:ss'][0]\n","daysPerBin = 1 #change this to bin into 2, 3, 4 day chunks\n","dfs11[\"day_float\"] = dfs11['MM:DD:YYYY hh:mm:ss'] - dfs11['MM:DD:YYYY hh:mm:ss'][0]\n","dfs11[\"day_float\"] = dfs11[\"day_float\"].astype('timedelta64[D]')/(daysPerBin)+1  \n","dfs11['4hour'] = dfs11['day_float'].astype(int)\n","dfs11.head()\n","\n","\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Number of files found: \n","35\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 12:55:21</td>\n","      <td>4</td>\n","      <td>4.07</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-11 12:56:23</td>\n","      <td>4</td>\n","      <td>4.07</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>59.0</td>\n","      <td>SHI_C144_M0_FED004_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:01:02</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-11 12:59:23</td>\n","      <td>4</td>\n","      <td>4.08</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:04:02</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-11 13:09:06</td>\n","      <td>4</td>\n","      <td>4.07</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:13:45</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-11 13:10:47</td>\n","      <td>4</td>\n","      <td>4.07</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_061120_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:15:26</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0 2020-06-11 12:55:21              4  ...        1.0      1\n","1 2020-06-11 12:56:23              4  ...        1.0      1\n","2 2020-06-11 12:59:23              4  ...        1.0      1\n","3 2020-06-11 13:09:06              4  ...        1.0      1\n","4 2020-06-11 13:10:47              4  ...        1.0      1\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"uNkd1f_tCKlN","colab":{"base_uri":"https://localhost:8080/","height":626},"executionInfo":{"status":"ok","timestamp":1615847323448,"user_tz":300,"elapsed":275,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"6ae41d5b-fdc5-4c90-f653-11e42a6e9728"},"source":["#join each file together in one df \n","dfs_all = pd.concat ([dfs1, dfs2, dfs3, dfs4, dfs5, dfs6, dfs7, dfs8, dfs9, dfs10, dfs11]).reset_index(drop=True)\n","df_agg_binned = dfs_all.groupby(['filename','group','sex','mouse','4hour'], as_index=False)['Left_Poke_Count', 'Right_Poke_Count'].max()\n","df_agg_binned['active_bias'] = (df_agg_binned['Left_Poke_Count'])/(df_agg_binned['Left_Poke_Count']+df_agg_binned['Right_Poke_Count'])\n"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>mouse</th>\n","      <th>RelativeTime</th>\n","      <th>day_float</th>\n","      <th>4hour</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-06-11 11:43:30</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_061120_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-06-12 10:28:35</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_061220_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:00:00</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-06-12 10:31:58</td>\n","      <td>3</td>\n","      <td>3.87</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>200.0</td>\n","      <td>SHI_C149_F2_FED003_061220_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:03:23</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-06-12 10:35:47</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SHI_C149_F2_FED003_061220_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:07:12</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-06-12 10:36:29</td>\n","      <td>3</td>\n","      <td>3.86</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>39.0</td>\n","      <td>SHI_C149_F2_FED003_061220_00.CSV</td>\n","      <td>SHI</td>\n","      <td>F</td>\n","      <td>C149_F2</td>\n","      <td>0 days 00:07:54</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11263</th>\n","      <td>2020-07-27 12:24:32</td>\n","      <td>4</td>\n","      <td>3.72</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>1.0</td>\n","      <td>SHI_C144_M0_FED004_072720_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:43:09</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>11264</th>\n","      <td>2020-07-27 12:28:50</td>\n","      <td>4</td>\n","      <td>3.71</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>18</td>\n","      <td>2</td>\n","      <td>17</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_072720_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:47:27</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>11265</th>\n","      <td>2020-07-27 12:28:54</td>\n","      <td>4</td>\n","      <td>3.71</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>18</td>\n","      <td>2</td>\n","      <td>18</td>\n","      <td>1.0</td>\n","      <td>SHI_C144_M0_FED004_072720_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:47:31</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>11266</th>\n","      <td>2020-07-27 12:39:02</td>\n","      <td>4</td>\n","      <td>3.72</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>19</td>\n","      <td>2</td>\n","      <td>18</td>\n","      <td>NaN</td>\n","      <td>SHI_C144_M0_FED004_072720_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:57:39</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>11267</th>\n","      <td>2020-07-27 12:39:16</td>\n","      <td>4</td>\n","      <td>3.71</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>19</td>\n","      <td>2</td>\n","      <td>19</td>\n","      <td>8.0</td>\n","      <td>SHI_C144_M0_FED004_072720_01.CSV</td>\n","      <td>SHI</td>\n","      <td>M</td>\n","      <td>C144_M0</td>\n","      <td>0 days 00:57:53</td>\n","      <td>46.0</td>\n","      <td>46</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11268 rows × 18 columns</p>\n","</div>"],"text/plain":["      MM:DD:YYYY hh:mm:ss  Device_Number  ...  day_float  4hour\n","0     2020-06-11 11:43:30              3  ...        1.0      1\n","1     2020-06-12 10:28:35              3  ...        1.0      1\n","2     2020-06-12 10:31:58              3  ...        1.0      1\n","3     2020-06-12 10:35:47              3  ...        1.0      1\n","4     2020-06-12 10:36:29              3  ...        1.0      1\n","...                   ...            ...  ...        ...    ...\n","11263 2020-07-27 12:24:32              4  ...       46.0     46\n","11264 2020-07-27 12:28:50              4  ...       46.0     46\n","11265 2020-07-27 12:28:54              4  ...       46.0     46\n","11266 2020-07-27 12:39:02              4  ...       46.0     46\n","11267 2020-07-27 12:39:16              4  ...       46.0     46\n","\n","[11268 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"y_XhMwbnkTNy","executionInfo":{"status":"ok","timestamp":1615848702524,"user_tz":300,"elapsed":195,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":["\n"],"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZBK4gvXgFy0z"},"source":["##import multisite overnight data"]},{"cell_type":"code","metadata":{"id":"QMggA7aYF1H2","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"ok","timestamp":1615847417079,"user_tz":300,"elapsed":11324,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"224f947d-01a8-45eb-88b4-22501b23cc84"},"source":["##############################################\n","####FOR ZAN FILES ONLY############\n","\n","PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/ZAN/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df = pd.DataFrame()\n","files = os.listdir (PATH)\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex'] = 'm'\n","\n","\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  #put two date/time cols together:\n","  temp[\"MM:DD:YYYY hh:mm:ss\"] = temp[\"MM:DD:YYYY\"] + ' ' + temp[\"hh:mm:ss\"]\n","  format = '%m/%d/%y %H:%M:%S'\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","\n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n","   \n","  #join each file together in one df \n","  df = pd.concat ([df, temp]).reset_index(drop=True) \n","  \n","\n","df = df.drop(['MM:DD:YYYY', 'hh:mm:ss'], axis=1)\n","df"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Number of files found: \n","56\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>FR_Ratio</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>3.85</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>ZAN_FED002_061119_01.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-06-11 16:44:20</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3.85</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>69</td>\n","      <td>ZAN_FED002_061119_01.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-06-11 16:49:17</td>\n","      <td>0 days 00:04:57</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>3.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>ZAN_FED002_061119_01.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-06-12 00:55:29</td>\n","      <td>0 days 08:11:09</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>3.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>ZAN_FED002_061119_01.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-06-12 00:56:54</td>\n","      <td>0 days 08:12:34</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>3.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>ZAN_FED002_061119_01.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-06-12 01:03:02</td>\n","      <td>0 days 08:18:42</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2366</th>\n","      <td>14</td>\n","      <td>4.07</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>42</td>\n","      <td>35</td>\n","      <td>42</td>\n","      <td>29</td>\n","      <td>ZAN_FED014_081819_00.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-08-18 17:46:04</td>\n","      <td>0 days 07:55:47</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2367</th>\n","      <td>14</td>\n","      <td>4.07</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>43</td>\n","      <td>35</td>\n","      <td>43</td>\n","      <td>18</td>\n","      <td>ZAN_FED014_081819_00.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-08-18 17:59:46</td>\n","      <td>0 days 08:09:29</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2368</th>\n","      <td>14</td>\n","      <td>4.07</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>44</td>\n","      <td>35</td>\n","      <td>44</td>\n","      <td>19</td>\n","      <td>ZAN_FED014_081819_00.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-08-18 18:00:58</td>\n","      <td>0 days 08:10:41</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2369</th>\n","      <td>14</td>\n","      <td>4.07</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>45</td>\n","      <td>35</td>\n","      <td>45</td>\n","      <td>1</td>\n","      <td>ZAN_FED014_081819_00.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-08-18 18:01:54</td>\n","      <td>0 days 08:11:37</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2370</th>\n","      <td>14</td>\n","      <td>4.07</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>46</td>\n","      <td>35</td>\n","      <td>46</td>\n","      <td>1</td>\n","      <td>ZAN_FED014_081819_00.CSV</td>\n","      <td>ZAN</td>\n","      <td>m</td>\n","      <td>2019-08-18 18:12:44</td>\n","      <td>0 days 08:22:27</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2371 rows × 15 columns</p>\n","</div>"],"text/plain":["      Device_Number  Battery_Voltage  ...    RelativeTime  Errors\n","0                 2             3.85  ... 0 days 00:00:00     NaN\n","1                 2             3.85  ... 0 days 00:04:57     3.0\n","2                 2             3.82  ... 0 days 08:11:09     3.0\n","3                 2             3.82  ... 0 days 08:12:34     0.0\n","4                 2             3.82  ... 0 days 08:18:42     0.0\n","...             ...              ...  ...             ...     ...\n","2366             14             4.07  ... 0 days 07:55:47     0.0\n","2367             14             4.07  ... 0 days 08:09:29     0.0\n","2368             14             4.07  ... 0 days 08:10:41     0.0\n","2369             14             4.07  ... 0 days 08:11:37     0.0\n","2370             14             4.07  ... 0 days 08:22:27     0.0\n","\n","[2371 rows x 15 columns]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"7vUcdeE1Uknf","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"ok","timestamp":1615847435955,"user_tz":300,"elapsed":3189,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"5f55c2a3-4344-404e-e6f0-0a9b717b4278"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/SNK/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df2 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex'] = 'u'\n","\n"," \n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n"," \n","    \n","  #join each file together in one df \n","  df2 = pd.concat ([df2, temp]).reset_index(drop=True) \n","  \n","\n","\n","groupsDict = {}\n","groupsDict.update(dict.fromkeys([\"SNK_FED000_030620_00.CSV\", \"SNK_FED000_031120_01.CSV\",\"SNK_FED000_031020_00.CSV\",\"SNK_FED000_030520_04.CSV\", \"SNK_FED000_031020_00.CSV\",\"SNK_FED000_030620_01.CSV\",\"SNK_FED000_031120_01.CSV\",\"SNK_FED001_030320_00.CSV\", \"SNK_FED001_031020_03.CSV\",\"SNK_FED001_030620_01.CSV\",\"SNK_FED001_031120_01.CSV\"], \"m\"))  \n","groupsDict.update(dict.fromkeys([\"SNK_FED000_031120_05.CSV\",\"SNK_FED002_030620_02.CSV\",\"SNK_FED002_031020_03.CSV\",\"SNK_FED002_031120_01.CSV\",\"SNK_FED004_031120_01.CSV\",\"SNK_FED004_031020_04.CSV\",\"SNK_FED004_030620_01.CSV\"], \"f\"))  \n","\n","df2['sex'] = df2['filename'].map(groupsDict)\n","\n","df2\n"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Number of files found: \n","12\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-03-10 16:56:53</td>\n","      <td>2</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>SNK_FED002_031020_03.CSV</td>\n","      <td>SNK</td>\n","      <td>f</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-03-10 16:58:28</td>\n","      <td>2</td>\n","      <td>4.16</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>81.0</td>\n","      <td>SNK_FED002_031020_03.CSV</td>\n","      <td>SNK</td>\n","      <td>f</td>\n","      <td>0 days 00:01:35</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-03-10 17:01:06</td>\n","      <td>2</td>\n","      <td>4.17</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SNK_FED002_031020_03.CSV</td>\n","      <td>SNK</td>\n","      <td>f</td>\n","      <td>0 days 00:04:13</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-03-10 17:03:40</td>\n","      <td>2</td>\n","      <td>4.17</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>SNK_FED002_031020_03.CSV</td>\n","      <td>SNK</td>\n","      <td>f</td>\n","      <td>0 days 00:06:47</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-03-10 17:04:38</td>\n","      <td>2</td>\n","      <td>4.17</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>52.0</td>\n","      <td>SNK_FED002_031020_03.CSV</td>\n","      <td>SNK</td>\n","      <td>f</td>\n","      <td>0 days 00:07:45</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2391</th>\n","      <td>2020-03-12 07:32:29</td>\n","      <td>0</td>\n","      <td>3.58</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>34</td>\n","      <td>11</td>\n","      <td>34</td>\n","      <td>NaN</td>\n","      <td>SNK_FED000_031120_01.CSV</td>\n","      <td>SNK</td>\n","      <td>m</td>\n","      <td>0 days 14:46:10</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2392</th>\n","      <td>2020-03-12 07:33:48</td>\n","      <td>0</td>\n","      <td>3.58</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>35</td>\n","      <td>11</td>\n","      <td>34</td>\n","      <td>NaN</td>\n","      <td>SNK_FED000_031120_01.CSV</td>\n","      <td>SNK</td>\n","      <td>m</td>\n","      <td>0 days 14:47:29</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2393</th>\n","      <td>2020-03-12 07:34:26</td>\n","      <td>0</td>\n","      <td>3.58</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>35</td>\n","      <td>11</td>\n","      <td>35</td>\n","      <td>9.0</td>\n","      <td>SNK_FED000_031120_01.CSV</td>\n","      <td>SNK</td>\n","      <td>m</td>\n","      <td>0 days 14:48:07</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2394</th>\n","      <td>2020-03-12 09:10:58</td>\n","      <td>0</td>\n","      <td>3.58</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>36</td>\n","      <td>11</td>\n","      <td>35</td>\n","      <td>NaN</td>\n","      <td>SNK_FED000_031120_01.CSV</td>\n","      <td>SNK</td>\n","      <td>m</td>\n","      <td>0 days 16:24:39</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2395</th>\n","      <td>2020-03-12 09:11:18</td>\n","      <td>0</td>\n","      <td>3.58</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>36</td>\n","      <td>11</td>\n","      <td>36</td>\n","      <td>15.0</td>\n","      <td>SNK_FED000_031120_01.CSV</td>\n","      <td>SNK</td>\n","      <td>m</td>\n","      <td>0 days 16:24:59</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2396 rows × 16 columns</p>\n","</div>"],"text/plain":["     MM:DD:YYYY hh:mm:ss  Device_Number  ...    RelativeTime  Errors\n","0    2020-03-10 16:56:53              2  ... 0 days 00:00:00     NaN\n","1    2020-03-10 16:58:28              2  ... 0 days 00:01:35     0.0\n","2    2020-03-10 17:01:06              2  ... 0 days 00:04:13     1.0\n","3    2020-03-10 17:03:40              2  ... 0 days 00:06:47     0.0\n","4    2020-03-10 17:04:38              2  ... 0 days 00:07:45     0.0\n","...                  ...            ...  ...             ...     ...\n","2391 2020-03-12 07:32:29              0  ... 0 days 14:46:10     1.0\n","2392 2020-03-12 07:33:48              0  ... 0 days 14:47:29     0.0\n","2393 2020-03-12 07:34:26              0  ... 0 days 14:48:07     0.0\n","2394 2020-03-12 09:10:58              0  ... 0 days 16:24:39     0.0\n","2395 2020-03-12 09:11:18              0  ... 0 days 16:24:59     0.0\n","\n","[2396 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"bP_5whJshQBZ","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"ok","timestamp":1615847473692,"user_tz":300,"elapsed":1782,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"d96cf704-66e1-4dc4-ba5a-029f8a17484e"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/OMA/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df3 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex'] = 'u'\n"," \n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","  \n","  #temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n"," \n","    \n","  #join each file together in one df \n","  df3 = pd.concat ([df3, temp]).reset_index(drop=True) \n","\n","df3"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Number of files found: \n","8\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>FR_Ratio</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2019-06-17 17:04:53</td>\n","      <td>6</td>\n","      <td>3.92</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>OMA_FED003_061719_03.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2019-06-17 18:10:40</td>\n","      <td>6</td>\n","      <td>3.92</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>OMA_FED003_061719_03.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 01:05:47</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2019-06-17 18:14:15</td>\n","      <td>6</td>\n","      <td>3.92</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>78</td>\n","      <td>OMA_FED003_061719_03.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 01:09:22</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2019-06-17 18:16:27</td>\n","      <td>6</td>\n","      <td>3.93</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>OMA_FED003_061719_03.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 01:11:34</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2019-06-17 18:18:16</td>\n","      <td>6</td>\n","      <td>3.92</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>51</td>\n","      <td>OMA_FED003_061719_03.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 01:13:23</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>425</th>\n","      <td>2019-06-18 04:14:57</td>\n","      <td>0</td>\n","      <td>3.60</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>41</td>\n","      <td>41</td>\n","      <td>40</td>\n","      <td>7</td>\n","      <td>OMA_FED000_061719_01.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 07:04:59</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>426</th>\n","      <td>2019-06-18 04:16:43</td>\n","      <td>0</td>\n","      <td>3.61</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>42</td>\n","      <td>41</td>\n","      <td>41</td>\n","      <td>4</td>\n","      <td>OMA_FED000_061719_01.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 07:06:45</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>427</th>\n","      <td>2019-06-18 04:17:55</td>\n","      <td>0</td>\n","      <td>3.60</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>43</td>\n","      <td>41</td>\n","      <td>42</td>\n","      <td>15</td>\n","      <td>OMA_FED000_061719_01.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 07:07:57</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>428</th>\n","      <td>2019-06-18 09:22:11</td>\n","      <td>0</td>\n","      <td>3.49</td>\n","      <td>5088</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>50</td>\n","      <td>45</td>\n","      <td>43</td>\n","      <td>25</td>\n","      <td>OMA_FED000_061719_01.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 12:12:13</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>429</th>\n","      <td>2019-06-18 09:26:04</td>\n","      <td>0</td>\n","      <td>3.49</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Left</td>\n","      <td>51</td>\n","      <td>45</td>\n","      <td>44</td>\n","      <td>5</td>\n","      <td>OMA_FED000_061719_01.CSV</td>\n","      <td>OMA</td>\n","      <td>u</td>\n","      <td>0 days 12:16:06</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>430 rows × 15 columns</p>\n","</div>"],"text/plain":["    MM:DD:YYYY hh:mm:ss  Device_Number  ...    RelativeTime  Errors\n","0   2019-06-17 17:04:53              6  ... 0 days 00:00:00     NaN\n","1   2019-06-17 18:10:40              6  ... 0 days 01:05:47     0.0\n","2   2019-06-17 18:14:15              6  ... 0 days 01:09:22     2.0\n","3   2019-06-17 18:16:27              6  ... 0 days 01:11:34     0.0\n","4   2019-06-17 18:18:16              6  ... 0 days 01:13:23     0.0\n","..                  ...            ...  ...             ...     ...\n","425 2019-06-18 04:14:57              0  ... 0 days 07:04:59     0.0\n","426 2019-06-18 04:16:43              0  ... 0 days 07:06:45     0.0\n","427 2019-06-18 04:17:55              0  ... 0 days 07:07:57     0.0\n","428 2019-06-18 09:22:11              0  ... 0 days 12:12:13     4.0\n","429 2019-06-18 09:26:04              0  ... 0 days 12:16:06     0.0\n","\n","[430 rows x 15 columns]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"Qb4tdAVChWFt","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"ok","timestamp":1615847493591,"user_tz":300,"elapsed":5439,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"45b48e8c-6c3e-4cb4-cac3-1cf3b9820d17"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data//VIC/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df4 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","  \n","  #temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n"," \n","    \n","  #join each file together in one df \n","  df4 = pd.concat ([df4, temp]).reset_index(drop=True) \n","  \n","groupsDict = {}\n","groupsDict.update(dict.fromkeys([\"VIC_FED003_042020_00.CSV\",\"VIC_FED002_042020_01.CSV\",\"VIC_FED004_042620_00.CSV\",\"VIC_FED003_042620_00.CSV\",\"VIC_FED002_042620_00.CSV\",\"VIC_FED008_021620_00.CSV\",\"VIC_FED001_030120_01.CSV\",\"VIC_FED002_030120_01.CSV\",\"VIC_FED003_030120_01.CSV\",\"VIC_FED005_021620_00.CSV\",\"VIC_FED001_042020_00.CSV\",\"VIC_FED001_042620_00.CSV\",], \"m\"))  \n","groupsDict.update(dict.fromkeys([\"VIC_FED009_042020_02.CSV\",\"VIC_FED008_042020_00.CSV\",\"VIC_FED007_042020_00.CSV\",\"VIC_FED008_042620_00.CSV\",\"VIC_FED007_042620_00.CSV\",\"VIC_FED001_021620_00.CSV\", \"VIC_FED002_021620_01.CSV\",\"VIC_FED003_021620_00.CSV\",\"VIC_FED004_021620_00.CSV\",\"VIC_FED005_030120_00.CSV\",\"VIC_FED006_030120_00.CSV\", \"VIC_FED007_030120_00.CSV\",], \"f\")) \n","\n","df4['sex'] = df4['filename'].map(groupsDict)\n","\n","df4"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Number of files found: \n","24\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","      <th>sex</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-02-16 17:11:24</td>\n","      <td>3</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>VIC_FED003_021620_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","      <td>f</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-02-16 17:13:22</td>\n","      <td>3</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>VIC_FED003_021620_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 00:01:58</td>\n","      <td>1.0</td>\n","      <td>f</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-02-16 17:16:48</td>\n","      <td>3</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>VIC_FED003_021620_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 00:05:24</td>\n","      <td>1.0</td>\n","      <td>f</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-02-16 17:24:30</td>\n","      <td>3</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>VIC_FED003_021620_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 00:13:06</td>\n","      <td>1.0</td>\n","      <td>f</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-02-16 17:32:22</td>\n","      <td>3</td>\n","      <td>4.18</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>VIC_FED003_021620_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 00:20:58</td>\n","      <td>0.0</td>\n","      <td>f</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7173</th>\n","      <td>2020-04-21 14:56:01</td>\n","      <td>1</td>\n","      <td>4.01</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>191</td>\n","      <td>36</td>\n","      <td>191</td>\n","      <td>NaN</td>\n","      <td>VIC_FED001_042020_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 20:09:27</td>\n","      <td>0.0</td>\n","      <td>m</td>\n","    </tr>\n","    <tr>\n","      <th>7174</th>\n","      <td>2020-04-21 14:57:35</td>\n","      <td>1</td>\n","      <td>4.00</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>192</td>\n","      <td>36</td>\n","      <td>191</td>\n","      <td>NaN</td>\n","      <td>VIC_FED001_042020_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 20:11:01</td>\n","      <td>0.0</td>\n","      <td>m</td>\n","    </tr>\n","    <tr>\n","      <th>7175</th>\n","      <td>2020-04-21 14:57:39</td>\n","      <td>1</td>\n","      <td>4.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>192</td>\n","      <td>36</td>\n","      <td>192</td>\n","      <td>1.0</td>\n","      <td>VIC_FED001_042020_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 20:11:05</td>\n","      <td>0.0</td>\n","      <td>m</td>\n","    </tr>\n","    <tr>\n","      <th>7176</th>\n","      <td>2020-04-21 14:57:58</td>\n","      <td>1</td>\n","      <td>4.00</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>193</td>\n","      <td>36</td>\n","      <td>192</td>\n","      <td>NaN</td>\n","      <td>VIC_FED001_042020_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 20:11:24</td>\n","      <td>0.0</td>\n","      <td>m</td>\n","    </tr>\n","    <tr>\n","      <th>7177</th>\n","      <td>2020-04-21 14:58:13</td>\n","      <td>1</td>\n","      <td>4.00</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>193</td>\n","      <td>36</td>\n","      <td>193</td>\n","      <td>9.0</td>\n","      <td>VIC_FED001_042020_00.CSV</td>\n","      <td>VIC</td>\n","      <td>0 days 20:11:39</td>\n","      <td>0.0</td>\n","      <td>m</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7178 rows × 16 columns</p>\n","</div>"],"text/plain":["     MM:DD:YYYY hh:mm:ss  Device_Number  ...  Errors  sex\n","0    2020-02-16 17:11:24              3  ...     NaN    f\n","1    2020-02-16 17:13:22              3  ...     1.0    f\n","2    2020-02-16 17:16:48              3  ...     1.0    f\n","3    2020-02-16 17:24:30              3  ...     1.0    f\n","4    2020-02-16 17:32:22              3  ...     0.0    f\n","...                  ...            ...  ...     ...  ...\n","7173 2020-04-21 14:56:01              1  ...     0.0    m\n","7174 2020-04-21 14:57:35              1  ...     0.0    m\n","7175 2020-04-21 14:57:39              1  ...     0.0    m\n","7176 2020-04-21 14:57:58              1  ...     0.0    m\n","7177 2020-04-21 14:58:13              1  ...     0.0    m\n","\n","[7178 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"C9DNnsSPhWOs","colab":{"base_uri":"https://localhost:8080/","height":661},"executionInfo":{"status":"ok","timestamp":1615847517832,"user_tz":300,"elapsed":2700,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"afebf7c5-40b0-4bfb-c71a-507f071f2b99"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/AMY/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df5 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex']='m'\n"," \n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","  \n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n","  #join each file together in one df \n","  df5 = pd.concat ([df5, temp]).reset_index(drop=True) \n","  \n"," \n","df5"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Number of files found: \n","12\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","      <th>Unnamed: 11</th>\n","      <th>Unnamed: 12</th>\n","      <th>Unnamed: 13</th>\n","      <th>Unnamed: 14</th>\n","      <th>Unnamed: 15</th>\n","      <th>Unnamed: 16</th>\n","      <th>Unnamed: 17</th>\n","      <th>Unnamed: 18</th>\n","      <th>Unnamed: 19</th>\n","      <th>Unnamed: 20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-02-21 16:26:00</td>\n","      <td>50</td>\n","      <td>4.22</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>AMY_4M_FR1_chow_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-02-21 16:26:00</td>\n","      <td>50</td>\n","      <td>4.22</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>AMY_4M_FR1_chow_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 00:00:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-02-21 16:42:00</td>\n","      <td>50</td>\n","      <td>4.23</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>AMY_4M_FR1_chow_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 00:16:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-02-21 16:42:00</td>\n","      <td>50</td>\n","      <td>4.22</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>5.0</td>\n","      <td>AMY_4M_FR1_chow_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 00:16:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-02-21 16:46:00</td>\n","      <td>50</td>\n","      <td>4.22</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>AMY_4M_FR1_chow_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 00:20:00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1856</th>\n","      <td>2020-02-22 10:55:00</td>\n","      <td>5</td>\n","      <td>4.17</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>54</td>\n","      <td>41</td>\n","      <td>54</td>\n","      <td>7.0</td>\n","      <td>AMY_4M_FR1_sucrose_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 18:13:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1857</th>\n","      <td>2020-02-22 14:13:00</td>\n","      <td>5</td>\n","      <td>4.15</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>55</td>\n","      <td>41</td>\n","      <td>54</td>\n","      <td>NaN</td>\n","      <td>AMY_4M_FR1_sucrose_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 21:31:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1858</th>\n","      <td>2020-02-22 14:13:00</td>\n","      <td>5</td>\n","      <td>3.98</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>55</td>\n","      <td>41</td>\n","      <td>55</td>\n","      <td>2.0</td>\n","      <td>AMY_4M_FR1_sucrose_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 21:31:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1859</th>\n","      <td>2020-02-22 14:14:00</td>\n","      <td>5</td>\n","      <td>4.15</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>56</td>\n","      <td>41</td>\n","      <td>55</td>\n","      <td>NaN</td>\n","      <td>AMY_4M_FR1_sucrose_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 21:32:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1860</th>\n","      <td>2020-02-22 14:14:00</td>\n","      <td>5</td>\n","      <td>3.96</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>56</td>\n","      <td>41</td>\n","      <td>56</td>\n","      <td>2.0</td>\n","      <td>AMY_4M_FR1_sucrose_CvS.CSV</td>\n","      <td>AMY</td>\n","      <td>m</td>\n","      <td>0 days 21:32:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1861 rows × 26 columns</p>\n","</div>"],"text/plain":["     MM:DD:YYYY hh:mm:ss  Device_Number  ...  Unnamed: 19  Unnamed: 20\n","0    2020-02-21 16:26:00             50  ...          NaN          NaN\n","1    2020-02-21 16:26:00             50  ...          NaN          NaN\n","2    2020-02-21 16:42:00             50  ...          NaN          NaN\n","3    2020-02-21 16:42:00             50  ...          NaN          NaN\n","4    2020-02-21 16:46:00             50  ...          NaN          NaN\n","...                  ...            ...  ...          ...          ...\n","1856 2020-02-22 10:55:00              5  ...          NaN          NaN\n","1857 2020-02-22 14:13:00              5  ...          NaN          NaN\n","1858 2020-02-22 14:13:00              5  ...          NaN          NaN\n","1859 2020-02-22 14:14:00              5  ...          NaN          NaN\n","1860 2020-02-22 14:14:00              5  ...          NaN          NaN\n","\n","[1861 rows x 26 columns]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"xnMwRllDhWUM","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1615847568800,"user_tz":300,"elapsed":1323,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"9bdd90d9-7c20-46ce-b214-73ac8f875fd9"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data//MAK/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df6 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex']='f'\n"," \n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  \n","  \n","  #temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp[\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  df6 = pd.concat ([df6, temp]).reset_index(drop=True) \n","  \n","# sort tbe dataframe df by Device and print the head\n","# df=df.sort_values(by=['Device_Number']) \n","df6"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Number of files found: \n","5\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","      <th>Unnamed: 11</th>\n","      <th>Unnamed: 12</th>\n","      <th>Unnamed: 13</th>\n","      <th>Unnamed: 14</th>\n","      <th>Unnamed: 15</th>\n","      <th>Unnamed: 16</th>\n","      <th>Unnamed: 17</th>\n","      <th>Unnamed: 18</th>\n","      <th>Unnamed: 19</th>\n","      <th>Unnamed: 20</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-02-04 19:23:09</td>\n","      <td>4</td>\n","      <td>3.93</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MAK_450-F1 FR1 Day 1 2_4_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-02-04 20:07:21</td>\n","      <td>4</td>\n","      <td>3.93</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>MAK_450-F1 FR1 Day 1 2_4_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 00:44:12</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-02-04 20:10:56</td>\n","      <td>4</td>\n","      <td>3.93</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>MAK_450-F1 FR1 Day 1 2_4_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 00:47:47</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-02-04 20:54:04</td>\n","      <td>4</td>\n","      <td>3.93</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>116.0</td>\n","      <td>MAK_450-F1 FR1 Day 1 2_4_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 01:30:55</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-02-04 21:05:22</td>\n","      <td>4</td>\n","      <td>3.92</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>MAK_450-F1 FR1 Day 1 2_4_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 01:42:13</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>838</th>\n","      <td>2020-01-23 06:23:59</td>\n","      <td>7</td>\n","      <td>4.07</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>55</td>\n","      <td>13</td>\n","      <td>55</td>\n","      <td>NaN</td>\n","      <td>MAK_456-F1 FR1 Day 1 1_22_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 11:19:52</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>839</th>\n","      <td>2020-01-23 06:33:55</td>\n","      <td>7</td>\n","      <td>4.07</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>56</td>\n","      <td>13</td>\n","      <td>55</td>\n","      <td>NaN</td>\n","      <td>MAK_456-F1 FR1 Day 1 1_22_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 11:29:48</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>840</th>\n","      <td>2020-01-23 06:34:06</td>\n","      <td>7</td>\n","      <td>4.07</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>56</td>\n","      <td>13</td>\n","      <td>56</td>\n","      <td>7.0</td>\n","      <td>MAK_456-F1 FR1 Day 1 1_22_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 11:29:59</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>841</th>\n","      <td>2020-01-23 08:30:55</td>\n","      <td>7</td>\n","      <td>4.06</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>57</td>\n","      <td>13</td>\n","      <td>56</td>\n","      <td>NaN</td>\n","      <td>MAK_456-F1 FR1 Day 1 1_22_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 13:26:48</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>842</th>\n","      <td>2020-01-23 08:31:02</td>\n","      <td>7</td>\n","      <td>4.07</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>57</td>\n","      <td>13</td>\n","      <td>57</td>\n","      <td>4.0</td>\n","      <td>MAK_456-F1 FR1 Day 1 1_22_20.csv</td>\n","      <td>MAK</td>\n","      <td>f</td>\n","      <td>0 days 13:26:55</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>843 rows × 26 columns</p>\n","</div>"],"text/plain":["    MM:DD:YYYY hh:mm:ss  Device_Number  ...  Unnamed: 19  Unnamed: 20\n","0   2020-02-04 19:23:09              4  ...          NaN          NaN\n","1   2020-02-04 20:07:21              4  ...          NaN          NaN\n","2   2020-02-04 20:10:56              4  ...          NaN          NaN\n","3   2020-02-04 20:54:04              4  ...          NaN          NaN\n","4   2020-02-04 21:05:22              4  ...          NaN          NaN\n","..                  ...            ...  ...          ...          ...\n","838 2020-01-23 06:23:59              7  ...          NaN          NaN\n","839 2020-01-23 06:33:55              7  ...          NaN          NaN\n","840 2020-01-23 06:34:06              7  ...          NaN          NaN\n","841 2020-01-23 08:30:55              7  ...          NaN          NaN\n","842 2020-01-23 08:31:02              7  ...          NaN          NaN\n","\n","[843 rows x 26 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"wL4o_g2MhWXc","colab":{"base_uri":"https://localhost:8080/","height":641},"executionInfo":{"status":"ok","timestamp":1615847597239,"user_tz":300,"elapsed":2125,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"5d3aad26-e489-4e17-ba7d-6d114ed583d9"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/BRI/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df7 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n","  temp['sex']='m'\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","   \n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","  \n"," \n","    \n","  #join each file together in one df \n","  df7 = pd.concat ([df7, temp]).reset_index(drop=True) \n","\n","df7"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Number of files found: \n","9\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Device_Number</th>\n","      <th>Battery_Voltage</th>\n","      <th>Motor_Turns</th>\n","      <th>FR_Ratio</th>\n","      <th>Warning_Stim</th>\n","      <th>Aversive_Stim</th>\n","      <th>Active_Poke</th>\n","      <th>Reward_Prob</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-12-12 15:09:38</td>\n","      <td>39</td>\n","      <td>4.04</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>34</td>\n","      <td>BRI_FED039_121218_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-12-12 15:12:31</td>\n","      <td>39</td>\n","      <td>4.04</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>16</td>\n","      <td>BRI_FED039_121218_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>0 days 00:02:53</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-12-12 15:15:35</td>\n","      <td>39</td>\n","      <td>4.04</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>9</td>\n","      <td>BRI_FED039_121218_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>0 days 00:05:57</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-12-12 15:17:56</td>\n","      <td>39</td>\n","      <td>4.05</td>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>BRI_FED039_121218_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>0 days 00:08:18</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-12-12 15:19:13</td>\n","      <td>39</td>\n","      <td>4.04</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>42</td>\n","      <td>BRI_FED039_121218_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>0 days 00:09:35</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>926</th>\n","      <td>2018-11-24 13:11:41</td>\n","      <td>21</td>\n","      <td>3.91</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>127</td>\n","      <td>47</td>\n","      <td>121</td>\n","      <td>1</td>\n","      <td>BRI_FED021_112318_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>1 days 01:46:22</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>927</th>\n","      <td>2018-11-24 13:12:03</td>\n","      <td>21</td>\n","      <td>3.91</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>128</td>\n","      <td>47</td>\n","      <td>122</td>\n","      <td>1</td>\n","      <td>BRI_FED021_112318_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>1 days 01:46:44</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>928</th>\n","      <td>2018-11-24 13:12:44</td>\n","      <td>21</td>\n","      <td>3.91</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>129</td>\n","      <td>47</td>\n","      <td>123</td>\n","      <td>4</td>\n","      <td>BRI_FED021_112318_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>1 days 01:47:25</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>929</th>\n","      <td>2018-11-24 13:13:32</td>\n","      <td>21</td>\n","      <td>3.92</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>130</td>\n","      <td>47</td>\n","      <td>124</td>\n","      <td>2</td>\n","      <td>BRI_FED021_112318_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>1 days 01:48:13</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>930</th>\n","      <td>2018-11-24 13:14:17</td>\n","      <td>21</td>\n","      <td>3.92</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Left</td>\n","      <td>NaN</td>\n","      <td>131</td>\n","      <td>47</td>\n","      <td>125</td>\n","      <td>6</td>\n","      <td>BRI_FED021_112318_00.CSV</td>\n","      <td>BRI</td>\n","      <td>m</td>\n","      <td>1 days 01:48:58</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>931 rows × 18 columns</p>\n","</div>"],"text/plain":["    MM:DD:YYYY hh:mm:ss  Device_Number  ...    RelativeTime  Errors\n","0   2018-12-12 15:09:38             39  ... 0 days 00:00:00     NaN\n","1   2018-12-12 15:12:31             39  ... 0 days 00:02:53     0.0\n","2   2018-12-12 15:15:35             39  ... 0 days 00:05:57     0.0\n","3   2018-12-12 15:17:56             39  ... 0 days 00:08:18     0.0\n","4   2018-12-12 15:19:13             39  ... 0 days 00:09:35     0.0\n","..                  ...            ...  ...             ...     ...\n","926 2018-11-24 13:11:41             21  ... 1 days 01:46:22     0.0\n","927 2018-11-24 13:12:03             21  ... 1 days 01:46:44     0.0\n","928 2018-11-24 13:12:44             21  ... 1 days 01:47:25     0.0\n","929 2018-11-24 13:13:32             21  ... 1 days 01:48:13     0.0\n","930 2018-11-24 13:14:17             21  ... 1 days 01:48:58     0.0\n","\n","[931 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"qxaTqZcO3iRe","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"ok","timestamp":1615847610560,"user_tz":300,"elapsed":4392,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"3b2943c5-b144-4db5-b0d5-b47de70b6df7"},"source":["PATH = \"gdrive/My Drive/Kravitz Lab Google Drive/OSF_files/Matikainen_Ankney_Earnest_Ali_et_al_2021/data/Fig_5_and_6/FED3_multisite_data/MAT/\"\n","print (\"Number of files found: \") \n","print(len(os.listdir (PATH)))\n","\n","# import all data from the CSV files in the PATH to a single dataframe, concatenating them vertically\n","df8 = pd.DataFrame()\n","files = os.listdir (PATH)\n","format = '%m/%d/%y %H:%M:%S'\n","\n","temp = pd.DataFrame()\n","\n","for file in files:\n","\n","  temp = pd.read_csv(PATH + file, parse_dates = True)\n","  \n","  temp['filename'] = os.path.basename(PATH[-4:-1]+\"_\"+file) \n","  temp['group'] = PATH[-4:-1]\n"," # temp['sex']='m'\n","  #strip white spaces from column names\n","  temp.columns = temp.columns.str.strip()\n","  \n","  temp['sex'] = 'u'\n","  \n","  #temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  temp['MM:DD:YYYY hh:mm:ss'] =  pd.to_datetime(temp['MM:DD:YYYY hh:mm:ss'])\n","  \n","  temp [\"RelativeTime\"] = temp[\"MM:DD:YYYY hh:mm:ss\"]  - temp[\"MM:DD:YYYY hh:mm:ss\"] [0]\n","  #if 'retrieval_time' is an int:\n","  #if temp['Retrieval_Time'].dtype != int: temp['Retrieval_Time']=np.NaN\n","  if temp['Retrieval_Time'].dtype == object: temp['Retrieval_Time']=np.NaN\n","\n","  \n","  #Make difference variables\n","  temp[\"Errors\"] = temp[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  \n","      \n","  #join each file together in one df \n","  df8 = pd.concat ([df8, temp]).reset_index(drop=True) \n","  \n","df8"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Number of files found: \n","20\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM:DD:YYYY hh:mm:ss</th>\n","      <th>Mouse</th>\n","      <th>Battery_Voltage</th>\n","      <th>MotorTurns</th>\n","      <th>Session_Type</th>\n","      <th>Event</th>\n","      <th>Active_Poke</th>\n","      <th>Left_Poke_Count</th>\n","      <th>Right_Poke_Count</th>\n","      <th>Pellet_Count</th>\n","      <th>Retrieval_Time</th>\n","      <th>filename</th>\n","      <th>group</th>\n","      <th>sex</th>\n","      <th>RelativeTime</th>\n","      <th>Errors</th>\n","      <th>Unnamed: 11</th>\n","      <th>Unnamed: 12</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-05-10 09:40:00</td>\n","      <td>25</td>\n","      <td>4.19</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MAT_FED025_051020_00.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 00:00:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-05-10 17:22:00</td>\n","      <td>25</td>\n","      <td>4.13</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>MAT_FED025_051020_00.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 07:42:00</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-05-10 17:32:00</td>\n","      <td>25</td>\n","      <td>4.13</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>MAT_FED025_051020_00.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 07:52:00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-05-10 18:36:00</td>\n","      <td>25</td>\n","      <td>4.12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>MAT_FED025_051020_00.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 08:56:00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-05-10 18:36:00</td>\n","      <td>25</td>\n","      <td>4.12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>MAT_FED025_051020_00.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 08:56:00</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4921</th>\n","      <td>2020-05-09 08:57:09</td>\n","      <td>24</td>\n","      <td>4.05</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>64</td>\n","      <td>48</td>\n","      <td>64</td>\n","      <td>NaN</td>\n","      <td>MAT_FED024_050820_02.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 23:27:55</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4922</th>\n","      <td>2020-05-09 09:03:34</td>\n","      <td>24</td>\n","      <td>4.05</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>65</td>\n","      <td>48</td>\n","      <td>64</td>\n","      <td>NaN</td>\n","      <td>MAT_FED024_050820_02.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 23:34:20</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4923</th>\n","      <td>2020-05-09 09:03:45</td>\n","      <td>24</td>\n","      <td>4.04</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>65</td>\n","      <td>48</td>\n","      <td>65</td>\n","      <td>2.0</td>\n","      <td>MAT_FED024_050820_02.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 23:34:31</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4924</th>\n","      <td>2020-05-09 09:08:54</td>\n","      <td>24</td>\n","      <td>4.05</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Poke</td>\n","      <td>Left</td>\n","      <td>66</td>\n","      <td>48</td>\n","      <td>65</td>\n","      <td>NaN</td>\n","      <td>MAT_FED024_050820_02.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 23:39:40</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4925</th>\n","      <td>2020-05-09 09:08:59</td>\n","      <td>24</td>\n","      <td>4.04</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Pellet</td>\n","      <td>Left</td>\n","      <td>66</td>\n","      <td>48</td>\n","      <td>66</td>\n","      <td>2.0</td>\n","      <td>MAT_FED024_050820_02.CSV</td>\n","      <td>MAT</td>\n","      <td>u</td>\n","      <td>0 days 23:39:45</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4926 rows × 18 columns</p>\n","</div>"],"text/plain":["     MM:DD:YYYY hh:mm:ss  Mouse  ...  Unnamed: 11  Unnamed: 12\n","0    2020-05-10 09:40:00     25  ...          NaN          NaN\n","1    2020-05-10 17:22:00     25  ...          NaN          NaN\n","2    2020-05-10 17:32:00     25  ...          NaN          NaN\n","3    2020-05-10 18:36:00     25  ...          NaN          NaN\n","4    2020-05-10 18:36:00     25  ...          NaN          NaN\n","...                  ...    ...  ...          ...          ...\n","4921 2020-05-09 08:57:09     24  ...          NaN          NaN\n","4922 2020-05-09 09:03:34     24  ...          NaN          NaN\n","4923 2020-05-09 09:03:45     24  ...          NaN          NaN\n","4924 2020-05-09 09:08:54     24  ...          NaN          NaN\n","4925 2020-05-09 09:08:59     24  ...          NaN          NaN\n","\n","[4926 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"kXmsDZJYhWdO","executionInfo":{"status":"ok","timestamp":1615847622809,"user_tz":300,"elapsed":206,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":["  #join each file together in one df \n","  df_all = pd.concat ([df, df2, df3, df4, df5, df6, df7, df8]).reset_index(drop=True)\n"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DGlsEK0bCNPS"},"source":["##Clean data"]},{"cell_type":"code","metadata":{"id":"b1ACfrLJIKpe","executionInfo":{"status":"ok","timestamp":1615847787069,"user_tz":300,"elapsed":223,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":["#drop variables we're not using\n","df_all=df_all.drop(['Battery_Voltage', 'Motor_Turns', 'Warning_Stim', 'Aversive_Stim', 'Active_Poke', 'Reward_Prob','Device_Number','FR_Ratio','Session_Type', 'Event', 'Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15', 'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18', 'Unnamed: 19', 'Unnamed: 20', 'Warning_Stim', 'Aversive_Stim', 'Reward_Prob' ], axis=1)\n"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"id":"hrllJ2xESgmg"},"source":["#convert delta date time to seconds\n","df_all['RelativeTime2'] = df_all['RelativeTime'] / np.timedelta64(1, 's')\n","\n","\n","#1 #filter retrieval time\n","df_all['Retrieval_Time'] = df_all['Retrieval_Time'].where(df_all['Retrieval_Time']<8000)\n","df_all['Retrieval_Time'] = df_all['Retrieval_Time'].where(df_all['Retrieval_Time']>0)\n","\n","#change retrieval time to float\n","df_all['Retrieval_Time'] = df_all['Retrieval_Time'].astype(float)\n","\n","#2 #filter for under 20 sec\n","df_all['Retrieval_Time_filt'] = df_all['Retrieval_Time'][df_all['Retrieval_Time']<=10]\n","\n","#3\n","#make a variable that's % of <1 min retrievals/total trials \n","#new variable total trials = count trials\n","df_all['count']=df_all.index\n","#count <60 sec trials\n","df_all['Retrieval_Time_filt_count'] = np.where(df_all['Retrieval_Time']<=10, 1, 0)\n","df_all['Retrieval_Time_filt_sum']= df_all['Retrieval_Time_filt_count'].cumsum()\n","#variable = count <1 min trials, divide by count \n","df_all['Retrieval_Time_filt_percent'] = df_all['Retrieval_Time_filt_sum']/df_all['count']\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h8VlGn0u3Kbf"},"source":["##Binned data "]},{"cell_type":"code","metadata":{"id":"N6_kVliWAiSS","executionInfo":{"status":"ok","timestamp":1615847931448,"user_tz":300,"elapsed":1950,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":["#bin into wider chunks\n","#set bin width for use with .resample method\n","bin = \"240min\"\n","\n","#rekey groups into integers for binning\n","df_all = df_all.replace('SNK',1).replace('OMA',2).replace('ZAN',3).replace('BRI',4).replace('AMY',5).replace('MAK',6).replace('VIC',7).replace('MAT',8)\n","df_all[\"sex\"] = df_all['sex'].replace('m',1).replace('f',2).replace('u',3)\n","#Split df into a list \"dfs\" that contains separate dfs for each mouse\n","dfs = [rows for _, rows in df_all.groupby('filename')]\n","\n","df_binned = pd.DataFrame()\n","#iterate over all unique device IDs in df[\"Device_Number\"]\n","for device in range (0, len(pd.unique (df_all[\"filename\"]))):\n","  tempdf = pd.DataFrame()\n","  tempdf = dfs[device].resample(bin, on='RelativeTime').max()\n","\n","  tempdf[\"Errors_binned\"] = tempdf[\"Right_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","  tempdf[\"Successes_binned\"] = tempdf[\"Left_Poke_Count\"].diff()  #create a new error column that shows the inactivt pokes\n","\n","  \n","\n","  #concatenate data back together\n","  df_binned = pd.concat ([df_binned, tempdf])\n","\n","#rekey groups back to strings\n","df_binned[\"group\"] = df_binned[\"group\"].replace(1, 'F').replace(2, 'E').replace(3, 'G').replace(4, 'B').replace(5, 'A').replace(6, 'C').replace(7, 'H').replace(8,'D')\n","df_binned[\"sex\"] = df_binned[\"sex\"].replace(1, 'm').replace(2, 'f').replace(3,'u')\n","\n","\n","##convert index to hours\n","hours = []\n","for i in df_binned.index:\n","    hours.append(i.total_seconds()/3600)\n","df_binned.index = hours\n","df_binned['NewRT'] = df_binned.index\n","df_binned.loc[(df_binned.NewRT == 0.0),'Successes_binned']=df_binned[df_binned.NewRT==0.0]['Left_Poke_Count']\n","df_binned.loc[(df_binned.NewRT == 0.0),'Errors_binned']=df_binned[df_binned.NewRT==0.0]['Right_Poke_Count']\n","df_binned['active_bias'] = (df_binned['Successes_binned'])/(df_binned['Successes_binned']+df_binned['Errors_binned'])\n","\n","df_binned['active_bias_percent'] = df_binned['active_bias']*100\n","\n","# Add 4hr to NewRT\n","df_binned[\"NewRT\"] = df_binned[\"NewRT\"]+4\n","\n","#Create a new df by copying the rows where df_binned[\"NewRT\"] == 4\n","to_append = df_binned[df_binned[\"NewRT\"]==4]\n","\n","#zero out Left pokes, Right pokes, Pellets, and NewRT (this preserves groups and filenames)\n","to_append[\"Left_Poke_Count\"]=0\n","to_append[\"Right_Poke_Count\"]=0\n","to_append[\"Pellet_Count\"]=0\n","to_append[\"NewRT\"]=0\n","\n","#Append new df to df_binned\n","df_binned = df_binned.append(to_append)"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"xA6wlYc_8Cj1","executionInfo":{"status":"ok","timestamp":1615847938774,"user_tz":300,"elapsed":350,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":[""],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zpoylq_s856v"},"source":["##Figure 5"]},{"cell_type":"code","metadata":{"id":"PCLOyOOH80qy","colab":{"base_uri":"https://localhost:8080/","height":330},"executionInfo":{"status":"ok","timestamp":1615847949369,"user_tz":300,"elapsed":2918,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"ff3f6325-8102-4517-b7ba-61f20edbe7d4"},"source":["#Fig5A\n","import matplotlib.ticker as ticker\n","\n","\n","sns_plot, ax = plt.subplots(figsize = (3,4.5))\n","\n","sns.set_style(\"white\")\n","\n","\n","sns_plot = sns.lineplot(data = df_binned[df_binned.group!='H'], \n","                   y = \"Left_Poke_Count\", \n","                   x = \"NewRT\", hue = \"group\", \n","                   palette='husl',\n","                    lw=3, ci=67, alpha=.7)\n","\n","sns_plot = sns.lineplot(data = df_binned[df_binned.group!='H'], \n","                   y = \"Left_Poke_Count\", \n","                   x = \"NewRT\", label='all mice',\n","                  color='black', \n","                    lw=4, ci=False)#, alpha=0)\n","\n","# Formating legend and labels\n","\n","handles, labels = ax.get_legend_handles_labels()\n","ax.legend(handles=handles[1:], labels=labels[1:], loc='upper left',prop={'size': 12}, frameon=False)\n","\n","#plt.title(\"FR\", fontsize=25)\n","plt.ylabel(\"Pellets Earned\", fontsize=25)\n","plt.xlabel(\"Time (Hour)\", fontsize = 25)\n","plt.tick_params(axis='y', which='major', labelsize=20)\n","plt.tick_params(axis='x', which='major', labelsize=20)\n","\n","ax.spines['top'].set_visible(False)\n","ax.spines['right'].set_visible(False)\n","\n","\n","ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","\n","plt.xlim(0,16) \n","\n","x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n","labels = ['0','','','','4','','','','8','','','','12','','','','16']\n","plt.xticks(x, labels, rotation='horizontal')\n","ax.get_legend().set_visible(False)\n","ax.legend(bbox_to_anchor=(1.05, 1),loc='upper left',prop={'size': 15}, frameon=False)\n","\n","\n","plt.xlim(0,16)\n","plt.ylim(-10,110)\n","\n","from google.colab import files\n","plt.savefig(\"active_poke_count.pdf\", bbox_inches = 'tight')\n","files.download(\"active_poke_count.pdf\")"],"execution_count":39,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_a8ccacac-e2e6-461b-93e2-a86513b6df79\", \"active_poke_count.pdf\", 15301)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 216x324 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"LJXrFCe9ErGU","executionInfo":{"status":"ok","timestamp":1615848156499,"user_tz":300,"elapsed":352,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}}},"source":["#make a simpler df\n","df_binned2 = df_binned.filter(items=['NewRT', 'group', 'Left_Poke_Count','filename'])\n","df_binned2=df_binned2.dropna().reset_index()\n","df_binned3 = df_binned2.pivot(index=['filename','group'], columns='NewRT', values='Left_Poke_Count').reset_index()\n","df_binned3 = df_binned3.ffill(axis=1)\n","#now, melt back to long form\n","df_binned4 = df_binned3.melt(id_vars=['filename', 'group'], var_name='NewRT', value_name='Left_Poke_Count')\n","df_binned4['Left_Poke_Count'] = df_binned4['Left_Poke_Count'].astype(float)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"IA8DDKo97bbq","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1615848159790,"user_tz":300,"elapsed":1730,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"2c668e77-1de4-4cf6-b81f-7a11e33047f5"},"source":["\n","sns_plot, axes = plt.subplots(ncols=2, figsize=(10,4), gridspec_kw={'width_ratios': [7, 0.75]}, sharey='row')\n","\n","x = df_binned4[df_binned4.NewRT==16]['group']\n","y = df_binned4[df_binned4.NewRT==16]['Left_Poke_Count']\n","\n","sns.swarmplot(x,y, order=[\"A\",\"B\", \"C\", \"D\", \"E\", \"F\",\"G\"], size =6, color=\"Black\", ax=axes[0])\n","\n","sns.violinplot(x, y, order=[\"A\",\"B\", \"C\", \"D\", \"E\", \"F\",\"G\"], data=df_binned4[df_binned4.group!='VIC'], alpha=0.5, inner=\"quartile\", palette=\"husl\",  ax=axes[0])\n","\n","\n","data= df_binned4[df_binned4.group!='H'][df_binned4.NewRT==16]['Left_Poke_Count']\n","sns.distplot(data, bins=np.arange(0,150,5), kde=False, norm_hist=False, vertical=True,  ax=axes[1], color='dimgrey')\n","\n","\n","axes[0].tick_params(labelsize =25)\n","axes[0].spines['top'].set_visible(False)\n","axes[0].spines['right'].set_visible(False)\n","\n","axes[1].tick_params(labelsize =25)\n","axes[1].spines['top'].set_visible(False)\n","axes[1].spines['right'].set_visible(False)\n","\n","\n","axes[0].set_ylabel(\"Pellets earned\", fontsize=22)\n","axes[0].set_xlabel(\"Group\", fontsize=25)\n","\n","axes[1].set_ylabel(\" \", fontsize=1)\n","axes[1].set_xlabel(\"# mice\", fontsize=25)\n","\n","plt.tight_layout()\n","\n","from google.colab import files\n","plt.savefig(\"active_pokes.pdf\", bbox_inches = 'tight')\n","files.download(\"active_pokes.pdf\")\n"],"execution_count":47,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n","  app.launch_new_instance()\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_e3490a0c-fe7e-42d5-860a-b6ba91f3c3b4\", \"active_pokes8hr.pdf\", 28295)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x288 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":264},"id":"yPOyfMpeEHOL","executionInfo":{"status":"ok","timestamp":1615848329030,"user_tz":300,"elapsed":672,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"72b5d9f6-d6f9-4a24-bf16-f1ee7b5a40a6"},"source":["#Fig5C\r\n","import matplotlib.ticker as ticker\r\n","\r\n","sns.color_palette(palette='pastel')\r\n","sns_plot, ax = plt.subplots(figsize = (4,3))\r\n","sns.set_style(\"white\")\r\n","\r\n","\r\n","\r\n","sns_plot = sns.barplot(data = df_binned[df_binned.group!='H'], \r\n","                   y = \"active_bias_percent\",\r\n","                   x = \"NewRT\", \r\n","                  palette='Greys',\r\n","                    lw=4, ci=67, alpha=.7, order=[4.0,8.0,12.0, 16])\r\n","\r\n","\r\n","plt.ylabel(\"Poke Efficiency \\n(% correct)\", fontsize=25)\r\n","plt.xlabel(\"Time (Hour)\", fontsize = 25)\r\n","plt.tick_params(axis='y', which='major', labelsize=25)\r\n","plt.tick_params(axis='x', which='major', labelsize=15)\r\n","\r\n","ax.spines['top'].set_visible(False)\r\n","ax.spines['right'].set_visible(False)\r\n","\r\n","plt.ylim(40,80)\r\n","\r\n","x = [0,1,2,3,4]\r\n","labels = ['4','8','12','16']\r\n","plt.xticks(x, labels, rotation='horizontal', fontsize=20)\r\n","\r\n","\r\n","from google.colab import files\r\n","plt.savefig(\"poke_efficiencey_bars.pdf\", bbox_inches = 'tight')\r\n","files.download(\"poke_efficiencey_bars.pdf\")\r\n","\r\n"],"execution_count":51,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_c15f2c9a-8c02-4a55-8cac-7e309fbeb8d5\", \"poke_efficiencey_bars.pdf\", 10890)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"u865IO6mEB1X","executionInfo":{"status":"ok","timestamp":1615848288793,"user_tz":300,"elapsed":1203,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"291ac2b9-5afc-4dc8-8032-874576f6df80"},"source":["#Fig5D\r\n","import matplotlib.ticker as ticker\r\n","\r\n","sns.color_palette(palette='pastel')\r\n","sns_plot, ax = plt.subplots(figsize = (4,3))\r\n","sns.set_style(\"white\")\r\n","sns_plot = sns.barplot(data = df_binned[df_binned.group!='H'], \r\n","                   y = \"Left_Poke_Count\",\r\n","                   x = \"NewRT\", \r\n","                  palette='Greys',\r\n","                    lw=4, ci=67, alpha=.7, order=[4.0,8.0,12.0,16.0])\r\n","plt.ylabel(\"Active Poke\\nCount\", fontsize=25)\r\n","plt.xlabel(\"Time (Hour)\", fontsize = 25)\r\n","plt.tick_params(axis='y', which='major', labelsize=25)\r\n","plt.tick_params(axis='x', which='major', labelsize=15)\r\n","\r\n","ax.spines['top'].set_visible(False)\r\n","ax.spines['right'].set_visible(False)\r\n","\r\n","\r\n","x = [0,1,2,3,4]\r\n","labels = ['4','8','12','16']\r\n","plt.xticks(x, labels, rotation='horizontal', fontsize=20)\r\n","\r\n","from google.colab import files\r\n","plt.savefig(\"poke_bars.pdf\", bbox_inches = 'tight')\r\n","files.download(\"poke_bars.pdf\")\r\n"],"execution_count":50,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_99867c9e-f59e-4b43-9ac5-1b979164d9b3\", \"poke_bars.pdf\", 10746)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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JDQ8f39/Tp48iYODA7169TJ0HKPwySef4Ovry7fffkuXLl0K1fye/1R4k4sCd/bs2Uw/X7lypWYi4qzaqB0+fFjvuYzJunXrABg6dGihmSU9vzVt2pS6desSFBSEj49Pof6HRJ5hCqEnISEhnD17luLFi9O7d29DxzEq/fv3B2Dnzp0GTpI3UjBFgcqq0yc0NFSzLTQ0lLCwMObPn0/nzp1p1KgRTk5O/PDDD5pbf4Dbt28zc+ZMOnXqRKNGjejRowc///wzSUlJ2WYIDQ1l8eLF9O3bl2bNmtGkSRN69erFV199xaNHj3L93fbs2YOiKLRt2zbdmun57fz580yZMoUOHTrQsGFDWrduzahRo/Dw8CAlJSXTff79739Tp04dzZyWmfH09KROnTp07do12/0VRWH37t0MGzaM1q1bU6dOHTw9PdO179evHwB+fn6Fes0luSUXRufmzZvMmzePqKgorKysSElJISQkhDVr1nDx4kU2b97M2bNnmTZtGvHx8VhbW5OUlMTDhw/58ccfuXPnDj/88EOmx/by8mLevHma5S7MzMwwMTHh/v373L9/H09PT3766adczat55swZAN59993cf3kdLVmyhM2bNwNp635bW1sTHR2Nv78//v7+eHl5sWrVKqysrPLl/IqiMHXqVI4cOYKJiQnW1taZzhRfsWJFqlWrRnBwMGfOnOGDDz7Ilzz5Ta4whdGZN28eDRo04MCBA1y6dInLly8zf/58TE1NuXjxIqtWrWLmzJl06dKFEydOcPHiRS5dusSECRMAOHjwIOfOnctw3LNnzzJ79mxSU1MZN24cx48f59q1awQEBHDo0CF69epFbGwsU6dO1flKMyYmhqCgIAAaNWqU978ELWzdulVTLIcMGcKZM2e4cOECFy9eZM6cORQrVgx/f38WLFiQbxmOHj3K8ePHmT17NhcuXODPP//k4sWLmf6Do16u4sKFC/mWJ7/JFaYwOhUrVuSXX37BzMwMSOthd3NzIzAwkH379rF69WratWvH999/r+lYsbS05NNPP+XixYtcvHiRAwcO0LZtW80xU1NT+c9//kNqaipffvklQ4YMSXdOe3t7fvzxRz7++GNOnDjBpk2bmDdvntaZAwMDNbe/devW1WqfgQMHZliKVlsJCQmsXLkSSLvdfXPZBwsLC0aPHo2pqSlfffUVBw8eZOzYsTRs2DBX58pOXFwc8+fPx83NTfOZpaUllpaWGdrWr18fb29vAgIC9J6joMgVpjA6o0aN0hTLN7151TJ+/PhMe6HVbf766690n1+4cIEHDx5QpkyZbBd7GzBgAAC+vr46ZX769CkApqamlC5dWqt9IiIieP78ebZ/snL27FlevXoFpI3RzMwHH3ygWWzM29tbl6+jNRsbmwz/+GRFvdaSel2gwkiuMIXReXOlwTe9OcYzq9tedZuoqKh0n1++fBlIu3Xu0KFDludWdxjpekseEREBpK3Hre1wIl0Grv/T9evXAahcubJmbOs/mZqa0qZNG/bv369pr2+NGjXK9B+3zNjY2ABpf8dRUVGaNcoLEymYwuhkdjsHpLt9zaoTQ90mOTk53efqK8CkpKRsr9zUEhIStMqq9vr1awCti0devXjxAiDHBcUqVaqUrr2+6TIaQP3yAvzv76uwkYIpigT188UmTZqwa9cuvR9ffRv+zyvbt50uz2AjIyM1v2v72MLYyDNMUSSon+XlZZxldtRXWgkJCQVy9VSuXDkAnjx5km079XZ1ezV1ocsua3R0dF4iZqB+5mptbU3x4sX1euyCIgVTFAnNmzcH0jocAgMD9X78WrVqaX4viIHZ6h7vJ0+ecP/+/UzbpKSkaF4Q+OczX/Xzw8ePH2d5jmvXrukjqoZ67fU3/64KGymYokho3bo11atXB9IGe6sHrmdFfTWkLXt7e02Hk74LTWbatWunua1Vv8f/Tzt27NA8u+3bt2+6beqhT9evX8+0aN67d4+jR4/qM7Lm76Vly5Z6PW5BkoIpioRixYqxcOFCihUrxqVLlxgxYgR+fn7pXqMMCQlh+/btvP/++2zbtk3nc6gLwdWrV/WWOyslS5bUTPfm7e3N559/runMio+PZ8uWLSxZsgSAPn36ZBiD2bVrVywsLEhKSmLatGn8/fffQFqnmI+PD6NHj8bCwkJveVNSUrhx4wZQuAumdPqIIsPR0ZEff/yRzz77jKtXrzJ69GiKFy+OpaUlcXFx6a46nZycdD5+v379OHToEKdOnUJRlHyfrWjEiBGEhISwefNmdu7cya5duyhVqhSxsbGaUQKtW7dm0aJFGfa1trZm7ty5LFiwgICAAHr37o2lpSWJiYkkJSXRtGlT+vfvn25AfF74+fkRFxdHuXLl0r1QUNhIwRRFipOTE8eOHWPbtm2cPn2ahw8fEh0djbm5Ofb29jRq1IjOnTvTsWNHnY/duXNnKlSowOPHj/nzzz9p3bp1PnyD9ObMmUOXLl3Ytm0bly9f5tWrV1haWlK3bl2cnZ0ZMGBAlj3ZgwYNokKFCmzcuJHr16+TnJxMzZo1ee+99xg9erReB7vv378fAFdX10Lb4QOgUhRFMXQIId4W7u7urFy5EldXV80tcVEXFxdH+/btSUhI4MiRI1StWtXQkXJNnmEKoUejR4+mbNmy7N+/P8chP0XF1q1biY2NZeDAgYW6WIIUTCH0ysrKismTJ5OUlMSaNWsMHcfgYmNj2bhxIxYWFkyZMsXQcfJMnmEKoWdDhgwhKioKExMTUlNTM50fsqgICwtj+PDh1KtXL8v1ngoTeYYphBBaKrr/9AkhhI6kYAohhJakYAohhJakYAohhJakYAohhJakYAohhJb+H2Ax/btSOZpOAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"LuroALHsoL8i","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1615848222468,"user_tz":300,"elapsed":849,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"d3528be0-8ce5-4c6f-faa5-5a089c614f88"},"source":["#Fig5E\n","import matplotlib.ticker as ticker\n","\n","sns.color_palette(palette='pastel')\n","sns_plot, ax = plt.subplots(figsize = (4,3))\n","sns.set_style(\"white\")\n","\n","sns_plot = sns.barplot(data = df_binned[df_binned.group!='H'], \n","                   y = \"Retrieval_Time_filt\",\n","                   x = \"NewRT\",\n","                  palette='Greys',\n","                    lw=4, ci=67, alpha=.7, order=[4.0,8.0,12.0,16.0])\n","\n","plt.ylabel(\"Retrieval\\nTime (sec)\", fontsize=25)\n","plt.xlabel(\"Time (Hour)\", fontsize = 25)\n","plt.tick_params(axis='y', which='major', labelsize=25)\n","plt.tick_params(axis='x', which='major', labelsize=15)\n","\n","ax.spines['top'].set_visible(False)\n","ax.spines['right'].set_visible(False)\n","\n","\n","x = [0,1,2,3,4]\n","labels = ['4','8','12','16']\n","plt.xticks(x, labels, rotation='horizontal', fontsize=20)\n","\n","\n","from google.colab import files\n","plt.savefig(\"retrieval_time.pdf\", bbox_inches = 'tight')\n","files.download(\"retrieval_time.pdf\")\n","\n"],"execution_count":48,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_1388592a-ae30-4d3e-be89-f60bb47855b0\", \"retrieval_time.pdf\", 10795)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":632},"id":"XSivzCzAEsbj","executionInfo":{"status":"ok","timestamp":1615848714314,"user_tz":300,"elapsed":877,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"7988b746-1eb9-48ef-f636-59f77bded54e"},"source":["#Fig5F\r\n","\r\n","df_binned_comp = df_binned[df_binned.group!='H']\r\n","df_binned_comp.rename(columns={'Mouse':'mouse'})\r\n","df_binned_comp['4hour'] = df_binned_comp['NewRT'].astype(int)\r\n","df_binned_comp['experiment'] = 'overnight'\r\n","\r\n","df_agg_binned['experiment'] = '1_hr_daily'\r\n","df_for_comparison = df_binned_comp.append(df_agg_binned)\r\n","\r\n","df_temp = df_for_comparison.filter(items=['experiment', '4hour', 'active_bias','filename'])\r\n","df_temp.tail(20)\r\n","df_most = df_temp[df_temp['experiment']=='overnight']\r\n","df_most = df_most[df_most['4hour']<=20]\r\n","df_most['day'] = df_most['4hour']/24\r\n","\r\n","\r\n","df_sin = df_temp[df_temp['experiment']=='1_hr_daily']\r\n","\r\n","df_sin['day'] = df_sin['4hour']-1\r\n","df_sin = df_sin[df_sin.day<=20]\r\n","\r\n","df_for_comparrison_b = df_most.append(df_sin)\r\n","\r\n","df_for_comparrison_c = df_for_comparrison_b.groupby(['experiment', '4hour','day'], as_index=False)['active_bias'].mean()\r\n","#multiply active_bias by 100  for graphing as a percent\r\n","df_for_comparrison_c[\"active_bias\"] = df_for_comparrison_c[\"active_bias\"] * 100\r\n","\r\n","#plot\r\n","import matplotlib.ticker as ticker\r\n","\r\n","#set size, style, and colors\r\n","sns_plot, ax = plt.subplots(figsize = (16.5,4.5))\r\n","sns.set_style(\"white\")\r\n","my_pal = {\"overnight\":\"dimgrey\", \"1_hr_daily\":\"teal\"}\r\n","\r\n","#plot data\r\n","sns_plot = sns.scatterplot(data = df_for_comparrison_c, \r\n","                   y = \"active_bias\", \r\n","                   x = \"day\", hue = \"experiment\", \r\n","                   palette=my_pal, s=200, legend=False)\r\n","\r\n","sns_plot = sns.lineplot(data = df_for_comparrison_c, \r\n","                   y = \"active_bias\", #\r\n","                   x = \"day\", hue = \"experiment\",\r\n","                   palette=my_pal, lw=3, alpha=0.4)\r\n","      \r\n","\r\n","# Formating legend and labels\r\n","ax.legend(bbox_to_anchor=(1.15, 1), loc='upper right',prop={'size': 15}, frameon=False)\r\n","plt.ylabel(\"Poke efficiency \\n(% correct)\", fontsize=25, color='black')\r\n","plt.xlabel(\"Time (days)\", fontsize = 25, color='black')\r\n","\r\n","#format ticks\r\n","plt.tick_params(axis='y', which='major', labelsize=20, colors = 'black')\r\n","plt.tick_params(axis='x', which='major', labelsize=20, colors = 'black')\r\n","plt.xticks(np.arange(0,21, 2))\r\n","plt.yticks([50,80, 100])\r\n","\r\n","#axis limits\r\n","plt.xlim(-0.5,20.5)\r\n","plt.ylim(50,100)\r\n","\r\n","#remove top and right spines \r\n","ax.spines['top'].set_visible(False)\r\n","ax.spines['right'].set_visible(False)\r\n","\r\n","#red line\r\n","plt.axhline(80, color='red', linestyle='dotted')\r\n","\r\n","#night time bars\r\n","for i in range (24):\r\n","  plt.fill([i,i+ 0.5,i+0.5,i],[100,100,1,1],'black',alpha=0.07)\r\n","\r\n","ax.get_legend().set_visible(False)\r\n","\r\n","from google.colab import files\r\n","plt.savefig(\"comparrison_line.pdf\", bbox_inches = 'tight')\r\n","files.download(\"comparrison_line.pdf\")\r\n","\r\n","\r\n"],"execution_count":56,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_f2bb69c5-9af5-4101-80c2-81a90c96e5f0\", \"comparrison_line.pdf\", 13080)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1188x324 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ecc8rEyXERFr"},"source":["##Figure 6"]},{"cell_type":"code","metadata":{"id":"c3zuVWT6f1NT","colab":{"base_uri":"https://localhost:8080/","height":344},"executionInfo":{"status":"ok","timestamp":1615848396262,"user_tz":300,"elapsed":1025,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"4dc75ccc-af34-44ab-9be7-3bcfdb1bfc5b"},"source":["#Fig6B\n","import matplotlib.ticker as ticker\n","\n","sns.color_palette(palette='pastel')\n","sns_plot, ax = plt.subplots(figsize = (4,4.5))\n","sns.set_style(\"white\")\n","\n","sns_plot = sns.lineplot(data = df_binned[df_binned.group=='G'], \n","                   y = \"Left_Poke_Count\", \n","                   x = \"NewRT\", #hue = \"group\", \n","                  color='dimgrey',  label = 'noMAG',\n","                    lw=4, ci=67, alpha=.7)\n","\n","\n","\n","sns_plot = sns.lineplot(data = df_binned[df_binned.group=='H'], \n","                   y = \"Left_Poke_Count\", \n","                   x = \"NewRT\", color='orange', label = 'MAG',\n","                   lw=4, ci=67, alpha=.7)\n","\n","plt.ylabel(\"Pellets Earned\", fontsize=25)\n","plt.xlabel(\"Bin End (Hour)\", fontsize = 25)\n","plt.tick_params(axis='y', which='major', labelsize=25)\n","plt.tick_params(axis='x', which='major', labelsize=25)\n","\n","ax.spines['top'].set_visible(False)\n","ax.spines['right'].set_visible(False)\n","\n","\n","ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","\n","x = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n","labels = ['0','','','','4','','','','8','','','','12','','','','16']\n","plt.xticks(x, labels, rotation='horizontal')\n","\n","ax.legend(loc='upper left',prop={'size': 15}, frameon=False)\n","plt.xlim(0,16)\n","plt.ylim(0,150)\n","\n","from google.colab import files\n","plt.savefig(\"act_pokes_vic.pdf\", bbox_inches = 'tight')\n","files.download(\"act_pokes_vic.pdf\")\n"],"execution_count":52,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_521c06f8-43bc-421a-8f9b-9f850627bdb4\", \"act_pokes_vic.pdf\", 11815)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x324 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"9FENFQgVAHli","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1615848418732,"user_tz":300,"elapsed":641,"user":{"displayName":"Bridget Matikainen-Ankney","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjDtxQMRxwlIhl5OzFqjmPzUnk8x2Wm_r-oWUjDcQ=s64","userId":"07619935647326937139"}},"outputId":"b074d1f6-dfdf-4b31-c4ba-a3acce772fdc"},"source":["#Fig6C\n","import matplotlib.ticker as ticker\n","\n","sns.color_palette(palette='pastel')\n","sns_plot, ax = plt.subplots(figsize = (2.4,4.5))\n","sns.set_style(\"white\")\n","pal = {'G':'grey', 'H':'orange'}\n","\n","df_binned_vic = df_binned4.copy()\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='A']\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='B']\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='C']\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='D']\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='E']\n","df_binned_vic = df_binned_vic[df_binned_vic.group!='F']\n","\n","x = df_binned_vic[df_binned_vic.NewRT==16]['group']\n","y = df_binned_vic[df_binned_vic.NewRT==16]['Left_Poke_Count']\n","\n","\n","sns.swarmplot(x,y, order=[\"G\",\"H\"], size =6, color=\"Black\")\n","\n","\n","sns.violinplot(x, y, order=[\"G\",\"H\"], alpha=0.5, inner=\"quartile\", palette=pal)\n","\n","plt.ylabel(\"Pelelts Earned 16 hr\", fontsize=25)\n","plt.xlabel(\" \", fontsize = 25)\n","plt.tick_params(axis='y', which='major', labelsize=25)\n","plt.tick_params(axis='x', which='major', labelsize=15)\n","\n","ax.spines['top'].set_visible(False)\n","ax.spines['right'].set_visible(False)\n","\n","\n","x = [0,1]\n","labels = ['noMAG','MAG']\n","plt.xticks(x, labels, rotation='horizontal', fontsize=20)\n","\n","from google.colab import files\n","plt.savefig(\"poke_bars_vic.pdf\", bbox_inches = 'tight')\n","files.download(\"poke_bars_vic.pdf\")"],"execution_count":53,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_6c24f61e-a808-45ab-b3db-1ba56c881fa9\", \"poke_bars_vic.pdf\", 14029)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["Ttest_indResult(statistic=-4.097874949734103, pvalue=0.0001012621554739304)"]},"metadata":{"tags":[]},"execution_count":53},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 172.8x324 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"hl1YYAueEir1"},"source":[""],"execution_count":null,"outputs":[]}]}